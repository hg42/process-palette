{
  "patterns": {
    "path_colon": {
      "expression": "(path):(line)"
    },
    "path_file_line": {
      "expression": "(?:\n\\bfile:?\\s+|\n\\bsource:?\\s+|\n\\bat:?\\s+\n)?\n['\"]?(path)['\"]?\n.*\\bline\\s+(line)"
    },
    "path_file_paren_line": {
      "expression": "(?:\n\\bfile:?\\s+|\n\\bsource:?\\s+|\n\\bat:?\\s+\n)?\n['\"]?(path)['\"]?\n\\s*[(\\[](line)[\\])]"
    },
    "path_squote": {
      "expression": "'(path)'"
    },
    "path_dquote": {
      "expression": "\"(path)\""
    },
    "path": {
      "expression": "(path)"
    },
    "line_trace_begin": {
      "expression": "^\\s*\\\\\\s+"
    },
    "line_trace_end": {
      "expression": "^\\s*/\\s+"
    },
    "inline_trace_result": {
      "expression": "(^\\s*/\\s+.*)(\\s+=\\s+.*)(.*$)"
    },
    "inline_error": {
      "expression": "[-\\w]*error[-\\w]*"
    },
    "inline_fail": {
      "expression": "\\bfail(ure|ed)?\\b"
    },
    "inline_warning": {
      "expression": "\\bwarn(ing)?\\b"
    },
    "line_dashes": {
      "expression": "^\\s*--"
    },
    "line_command": {
      "expression": "^\\s*>"
    },
    "line_exclamation": {
      "expression": "^\\s*!"
    },
    "line_star": {
      "expression": "^\\s*\\*"
    },
    "line_bracket": {
      "expression": "^\\s*[[{]"
    },
    "line_build": {
      "expression": "^\\s*build"
    },
    "line_at": {
      "expression": "^\\s*at\\b"
    }
  },
  "allPatterns": [
    "path_colon",
    "path_file_line",
    "path_file_paren_line",
    "path_squote",
    "path_dquote",
    "path",
    "line_trace_begin",
    "line_trace_end",
    "inline_trace_result",
    "inline_error",
    "inline_fail",
    "inline_warning",
    "line_dashes",
    "line_command",
    "line_exclamation",
    "line_star",
    "line_bracket",
    "line_build",
    "line_at"
  ],
  "commands": [
    {
      "namespace" : "process-palette-test",
      "action" : "cat-test",
      "command" : "cat",
      "arguments" : ["{fileAbsPath}"],
      "cwd" : "{projectPath}",
      "stream" : false,
      "outputTarget" : "panel",
      "autoShowOutput" : true,
      "maxCompleted" : 1,
      "outputBufferSize" : 10000,
      "successOutput" : "{stdout}",
      "errorOutput" : "{stdout}\n{stderr}",
      "fatalOutput" : "Failed to execute : {fullCommand}\n{stdout}\n{stderr}",
      "successMessage" : "Executed : {fullCommand}",
      "errorMessage" : "Executed : {fullCommand}\nReturned with code {exitStatus}\n{stderr}",
      "fatalMessage" : "Failed to execute : {fullCommand}\n{stdout}\n{stderr}",
      "patterns": []
    }
  ]
}
